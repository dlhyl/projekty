/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.gui.utils.CellRenderers;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import sk.stu.fiit.app.trip.Vylet;
import sk.stu.fiit.app.user.Vyletnik;
import sk.stu.fiit.gui.utils.RoundedImage;
import sk.stu.fiit.gui.utils.RoundedPanel;

/**
 *
 * @author dlhyl
 */
public class UcastniciCellRenderer extends JPanel implements ListCellRenderer<Vyletnik> {
    private Vylet v;
    private int imageSize = 30;
    private ArrayList<Vyletnik> rebricek;
    private boolean selectable = false;
    /**
     * Creates new form UcastniciCellRenderer
     */
    public UcastniciCellRenderer(Vylet v) {
        this.v = v;
        
        initComponents();
    }
    
    public UcastniciCellRenderer(Vylet v, int imageSize, boolean selectable) {
        this.v = v;
        this.imageSize = imageSize;
        initComponents();
        this.setPreferredSize(new Dimension(0,this.imageSize+(int)(this.imageSize*(1.0d/3))));
    }

    public UcastniciCellRenderer(ArrayList<Vyletnik> rebricek, int imageSize) {
        this.imageSize = imageSize;
        this.rebricek = rebricek;
        this.selectable = selectable;
        initComponents();
        this.setPreferredSize(new Dimension(0,this.imageSize+(int)(this.imageSize*(1.0d/3))));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblContent = new RoundedPanel(this.imageSize-5);
        lblRank = new javax.swing.JLabel();
        lblIcon = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblReward = new javax.swing.JLabel();
        lblIconBoss = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(0, 40));
        setLayout(new java.awt.GridBagLayout());

        lblContent.setOpaque(false);
        lblContent.setLayout(new java.awt.GridBagLayout());

        lblRank.setFont(new java.awt.Font("Gill Sans MT", 1, 24)); // NOI18N
        lblRank.setForeground(new java.awt.Color(255, 204, 204));
        lblRank.setText("#1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        lblContent.add(lblRank, gridBagConstraints);

        lblIcon.setMaximumSize(new java.awt.Dimension(this.imageSize, this.imageSize));
        lblIcon.setMinimumSize(new java.awt.Dimension(this.imageSize, this.imageSize));
        lblIcon.setPreferredSize(new java.awt.Dimension(this.imageSize, this.imageSize));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        lblContent.add(lblIcon, gridBagConstraints);

        lblName.setFont(new java.awt.Font("Gill Sans MT", 1, 24)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 204, 204));
        lblName.setText("Bugal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        lblContent.add(lblName, gridBagConstraints);

        lblReward.setFont(new java.awt.Font("Gill Sans MT", 1, 24)); // NOI18N
        lblReward.setForeground(new java.awt.Color(212, 175, 55));
        lblReward.setText("100 bodov");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        lblContent.add(lblReward, gridBagConstraints);

        lblIconBoss.setPreferredSize(new java.awt.Dimension(24, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        lblContent.add(lblIconBoss, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
        add(lblContent, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public Component getListCellRendererComponent(JList<? extends Vyletnik> list, Vyletnik value, int index, boolean isSelected, boolean cellHasFocus) {
        lblContent.setBackground(new Color(101, 21, 40 ));
        if (v != null) {
            if (v.isZakladatel(value)) {
                lblIconBoss.setIcon(new ImageIcon(getClass().getResource("/sk/stu/fiit/assets/icons/crown-gold.png")));
            }
            else if (v.isVeduci(value)) { 
                lblIconBoss.setIcon(new ImageIcon(getClass().getResource("/sk/stu/fiit/assets/icons/crown.png")));
            } else {
                lblIconBoss.setIcon(null);
            }
            if (isSelected)
                lblContent.setBackground(new Color(144, 30, 57 ));
        }
        
        if (rebricek != null) {
            int pozicia = rebricek.indexOf(value);
            lblRank.setText("#"+String.valueOf(pozicia+1));
            lblReward.setText(String.valueOf(value.getStats().getPoints())+java.util.ResourceBundle.getBundle("sk/stu/fiit/gui/bundle").getString(" BODOV"));
            lblRank.setVisible(true);
            lblReward.setVisible(true);
        } else {
            lblRank.setVisible(false);
            lblReward.setVisible(false);
        }
        
        if (value.getObrazok() != null)
            lblIcon.setIcon(RoundedImage.getImage(value.getObrazok(), this.imageSize));
        else
            lblIcon.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/sk/stu/fiit/assets/icons/profile-user-256.png")).getImage().getScaledInstance(this.imageSize, this.imageSize, Image.SCALE_DEFAULT)));
            
        lblName.setText(value.getCeleMeno());
        return this;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel lblContent;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblIconBoss;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRank;
    private javax.swing.JLabel lblReward;
    // End of variables declaration//GEN-END:variables
}
